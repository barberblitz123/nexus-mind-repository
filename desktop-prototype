<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NEXUS Desktop Development Environment</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            overflow: hidden;
            color: #333;
        }

        .main-container {
            display: flex;
            height: 100vh;
            gap: 20px;
            padding: 20px;
        }

        /* Chat Panel */
        .chat-panel {
            width: 350px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .chat-header {
            padding: 20px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            background: linear-gradient(135deg, #6c5ce7, #a29bfe);
            color: white;
            border-radius: 20px 20px 0 0;
        }

        .chat-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .chat-status {
            font-size: 12px;
            opacity: 0.8;
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .message {
            padding: 12px 16px;
            border-radius: 18px;
            max-width: 85%;
            word-wrap: break-word;
        }

        .message.user {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            align-self: flex-end;
        }

        .message.assistant {
            background: #f8f9fa;
            color: #333;
            align-self: flex-start;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .chat-input {
            padding: 20px;
            border-top: 1px solid rgba(0, 0, 0, 0.05);
        }

        .input-container {
            display: flex;
            gap: 10px;
            align-items: flex-end;
        }

        .file-upload {
            background: #6c5ce7;
            border: none;
            border-radius: 12px;
            padding: 12px;
            color: white;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .file-upload:hover {
            background: #5a4fcf;
            transform: translateY(-2px);
        }

        .message-input {
            flex: 1;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            padding: 12px 16px;
            font-size: 14px;
            resize: none;
            max-height: 100px;
            min-height: 44px;
        }

        .input-actions {
            display: flex;
            gap: 8px;
        }

        .mic-btn, .send-btn {
            background: #00b894;
            border: none;
            border-radius: 12px;
            padding: 12px;
            color: white;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .mic-btn:hover, .send-btn:hover {
            background: #00a085;
            transform: translateY(-2px);
        }

        .mic-btn.recording {
            background: #e17055;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        /* Preview Panel */
        .preview-panel {
            flex: 1;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            flex-direction: column;
            position: relative;
        }

        .preview-header {
            padding: 20px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            background: linear-gradient(135deg, #00b894, #00cec9);
            color: white;
            border-radius: 20px 20px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .preview-controls {
            display: flex;
            gap: 10px;
        }

        .control-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 8px;
            padding: 8px 12px;
            color: white;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s ease;
        }

        .control-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .preview-content {
            flex: 1;
            padding: 20px;
            overflow: hidden;
            position: relative;
        }

        .preview-iframe {
            width: 100%;
            height: 100%;
            border: none;
            border-radius: 12px;
            background: white;
        }

        .building-indicator {
            position: absolute;
            top: 20px;
            right: 20px;
            background: #00b894;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .building-dot {
            width: 8px;
            height: 8px;
            background: white;
            border-radius: 50%;
            animation: building 1.5s infinite;
        }

        @keyframes building {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }

        /* Multi-Agent Windows */
        .agent-window {
            position: absolute;
            width: 320px;
            height: 240px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.2);
            cursor: move;
            transition: transform 0.2s ease;
            z-index: 100;
        }

        .agent-window:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
        }

        .agent-header {
            padding: 16px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            display: flex;
            justify-content: between;
            align-items: center;
            cursor: move;
        }

        .agent-title {
            font-size: 14px;
            font-weight: 600;
            flex: 1;
        }

        .agent-status {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #00b894;
        }

        .agent-content {
            padding: 16px;
            font-size: 12px;
            line-height: 1.4;
            height: calc(100% - 60px);
            overflow-y: auto;
        }

        .window-controls {
            position: absolute;
            top: 12px;
            right: 12px;
            display: flex;
            gap: 6px;
        }

        .window-control {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            cursor: pointer;
        }

        .close { background: #ff5f56; }
        .minimize { background: #ffbd2e; }
        .maximize { background: #27ca3f; }

        /* Panel Resizer */
        .panel-resizer {
            width: 4px;
            background: rgba(255, 255, 255, 0.3);
            cursor: col-resize;
            transition: background 0.2s ease;
        }

        .panel-resizer:hover {
            background: rgba(255, 255, 255, 0.5);
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .chat-panel {
                width: 300px;
            }
        }

        .drag-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.05);
            border: 2px dashed #6c5ce7;
            border-radius: 20px;
            display: none;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            font-weight: 600;
            color: #6c5ce7;
        }

        .drag-overlay.active {
            display: flex;
        }

        /* File upload styles */
        .file-input {
            display: none;
        }

        .upload-area {
            border: 2px dashed #ddd;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        .upload-area:hover {
            border-color: #6c5ce7;
            background: rgba(108, 92, 231, 0.05);
        }

        .tabs {
            display: flex;
            background: rgba(0, 0, 0, 0.05);
            border-radius: 12px;
            padding: 4px;
            margin-bottom: 16px;
        }

        .tab {
            flex: 1;
            padding: 8px 16px;
            border-radius: 8px;
            cursor: pointer;
            text-align: center;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .tab.active {
            background: white;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
    <div class="main-container">
        <!-- Chat Panel -->
        <div class="chat-panel" id="chatPanel">
            <div class="chat-header">
                <div class="chat-title">NEXUS Assistant</div>
                <div class="chat-status">● Online</div>
            </div>
            
            <div class="chat-messages" id="chatMessages">
                <div class="message assistant">
                    Hello! I'm NEXUS, your development assistant. I can help you build applications, optimize code, and manage projects. What would you like to create today?
                </div>
            </div>
            
            <div class="chat-input">
                <div class="tabs">
                    <div class="tab active" onclick="switchTab('chat')">Chat</div>
                    <div class="tab" onclick="switchTab('files')">Files</div>
                </div>
                
                <div id="chatTab">
                    <div class="input-container">
                        <button class="file-upload" onclick="document.getElementById('fileInput').click()">
                            📎
                        </button>
                        <textarea class="message-input" id="messageInput" placeholder="Type your message..."></textarea>
                        <div class="input-actions">
                            <button class="mic-btn" id="micBtn" onclick="toggleMic()">🎤</button>
                            <button class="send-btn" onclick="sendMessage()">→</button>
                        </div>
                    </div>
                </div>
                
                <div id="filesTab" style="display: none;">
                    <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                        <div>📁 Drop files here or click to upload</div>
                        <div style="font-size: 12px; color: #666; margin-top: 8px;">
                            Supports all file types
                        </div>
                    </div>
                </div>
                
                <input type="file" id="fileInput" class="file-input" multiple onchange="handleFileUpload(event)">
            </div>
            
            <div class="drag-overlay" id="dragOverlay">
                Drop your files here
            </div>
        </div>

        <!-- Panel Resizer -->
        <div class="panel-resizer" id="panelResizer"></div>

        <!-- Preview Panel -->
        <div class="preview-panel" id="previewPanel">
            <div class="preview-header">
                <div>
                    <div style="font-weight: 600;">Live Preview</div>
                    <div style="font-size: 12px; opacity: 0.9;">Real-time building</div>
                </div>
                <div class="preview-controls">
                    <button class="control-btn" onclick="refreshPreview()">Refresh</button>
                    <button class="control-btn" onclick="expandPreview()">Expand</button>
                    <button class="control-btn" onclick="toggleSide()">↔</button>
                </div>
            </div>
            
            <div class="preview-content">
                <iframe class="preview-iframe" id="previewIframe" src="about:blank"></iframe>
                <div class="building-indicator" id="buildingIndicator" style="display: none;">
                    <div class="building-dot"></div>
                    Building...
                </div>
            </div>
        </div>
    </div>

    <!-- Multi-Agent Windows -->
    <div class="agent-window" id="agent1" style="top: 100px; left: 400px;">
        <div class="window-controls">
            <div class="window-control close" onclick="closeAgent('agent1')"></div>
            <div class="window-control minimize" onclick="minimizeAgent('agent1')"></div>
            <div class="window-control maximize" onclick="maximizeAgent('agent1')"></div>
        </div>
        <div class="agent-header">
            <div class="agent-title">Frontend Agent</div>
            <div class="agent-status"></div>
        </div>
        <div class="agent-content">
            <div>🎨 Building React components...</div>
            <div style="margin-top: 8px; color: #666;">
                ✓ Created Header component<br>
                ✓ Added navigation<br>
                🔄 Styling with Tailwind...
            </div>
        </div>
    </div>

    <div class="agent-window" id="agent2" style="top: 200px; left: 750px;">
        <div class="window-controls">
            <div class="window-control close" onclick="closeAgent('agent2')"></div>
            <div class="window-control minimize" onclick="minimizeAgent('agent2')"></div>
            <div class="window-control maximize" onclick="maximizeAgent('agent2')"></div>
        </div>
        <div class="agent-header">
            <div class="agent-title">Backend Agent</div>
            <div class="agent-status"></div>
        </div>
        <div class="agent-content">
            <div>⚙️ Setting up Express server...</div>
            <div style="margin-top: 8px; color: #666;">
                ✓ Configured routes<br>
                ✓ Database connection<br>
                🔄 API endpoints...
            </div>
        </div>
    </div>

    <div class="agent-window" id="agent3" style="top: 300px; left: 500px;">
        <div class="window-controls">
            <div class="window-control close" onclick="closeAgent('agent3')"></div>
            <div class="window-control minimize" onclick="minimizeAgent('agent3')"></div>
            <div class="window-control maximize" onclick="maximizeAgent('agent3')"></div>
        </div>
        <div class="agent-header">
            <div class="agent-title">QA Agent</div>
            <div class="agent-status"></div>
        </div>
        <div class="agent-content">
            <div>🧪 Running tests...</div>
            <div style="margin-top: 8px; color: #666;">
                ✓ Unit tests: 24/24<br>
                ✓ Integration: 12/12<br>
                🔄 E2E testing...
            </div>
        </div>
    </div>

    <script>
        let isRecording = false;
        let draggedAgent = null;
        let dragOffset = { x: 0, y: 0 };

        // Chat functionality
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            if (message) {
                addMessage(message, 'user');
                input.value = '';
                
                // Simulate building
                showBuilding();
                
                // Simulate response
                setTimeout(() => {
                    addMessage("I'll help you with that! Let me start building...", 'assistant');
                    hideBuilding();
                }, 1500);
            }
        }

        function addMessage(text, sender) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            messageDiv.textContent = text;
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function toggleMic() {
            const micBtn = document.getElementById('micBtn');
            isRecording = !isRecording;
            
            if (isRecording) {
                micBtn.classList.add('recording');
                micBtn.textContent = '⏹️';
            } else {
                micBtn.classList.remove('recording');
                micBtn.textContent = '🎤';
            }
        }

        function switchTab(tab) {
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            event.target.classList.add('active');
            
            if (tab === 'chat') {
                document.getElementById('chatTab').style.display = 'block';
                document.getElementById('filesTab').style.display = 'none';
            } else {
                document.getElementById('chatTab').style.display = 'none';
                document.getElementById('filesTab').style.display = 'block';
            }
        }

        function handleFileUpload(event) {
            const files = event.target.files;
            for (let file of files) {
                addMessage(`📎 Uploaded: ${file.name}`, 'user');
            }
        }

        // Preview functionality
        function showBuilding() {
            document.getElementById('buildingIndicator').style.display = 'flex';
        }

        function hideBuilding() {
            document.getElementById('buildingIndicator').style.display = 'none';
        }

        function refreshPreview() {
            showBuilding();
            setTimeout(hideBuilding, 2000);
        }

        function expandPreview() {
            const preview = document.getElementById('previewPanel');
            if (preview.style.position === 'fixed') {
                preview.style.position = 'relative';
                preview.style.top = 'auto';
                preview.style.left = 'auto';
                preview.style.width = 'auto';
                preview.style.height = 'auto';
                preview.style.zIndex = 'auto';
            } else {
                preview.style.position = 'fixed';
                preview.style.top = '40px';
                preview.style.left = '40px';
                preview.style.width = 'calc(100vw - 80px)';
                preview.style.height = 'calc(100vh - 80px)';
                preview.style.zIndex = '1000';
            }
        }

        function toggleSide() {
            const container = document.querySelector('.main-container');
            const chat = document.getElementById('chatPanel');
            const preview = document.getElementById('previewPanel');
            
            if (container.firstElementChild === chat) {
                container.appendChild(chat);
            } else {
                container.insertBefore(chat, preview);
            }
        }

        // Agent window functionality
        function closeAgent(agentId) {
            document.getElementById(agentId).style.display = 'none';
        }

        function minimizeAgent(agentId) {
            const agent = document.getElementById(agentId);
            agent.style.transform = 'scale(0.8)';
            agent.style.opacity = '0.7';
        }

        function maximizeAgent(agentId) {
            const agent = document.getElementById(agentId);
            agent.style.transform = 'scale(1)';
            agent.style.opacity = '1';
        }

        // Drag functionality for agent windows
        document.querySelectorAll('.agent-window').forEach(agent => {
            agent.addEventListener('mousedown', startDrag);
        });

        function startDrag(e) {
            if (e.target.classList.contains('window-control')) return;
            
            draggedAgent = e.currentTarget;
            const rect = draggedAgent.getBoundingClientRect();
            dragOffset.x = e.clientX - rect.left;
            dragOffset.y = e.clientY - rect.top;
            
            document.addEventListener('mousemove', drag);
            document.addEventListener('mouseup', stopDrag);
            e.preventDefault();
        }

        function drag(e) {
            if (draggedAgent) {
                const x = e.clientX - dragOffset.x;
                const y = e.clientY - dragOffset.y;
                
                draggedAgent.style.left = Math.max(0, Math.min(window.innerWidth - 320, x)) + 'px';
                draggedAgent.style.top = Math.max(0, Math.min(window.innerHeight - 240, y)) + 'px';
            }
        }

        function stopDrag() {
            draggedAgent = null;
            document.removeEventListener('mousemove', drag);
            document.removeEventListener('mouseup', stopDrag);
        }

        // Drag and drop for files
        const chatPanel = document.getElementById('chatPanel');
        const dragOverlay = document.getElementById('dragOverlay');

        chatPanel.addEventListener('dragover', (e) => {
            e.preventDefault();
            dragOverlay.classList.add('active');
        });

        chatPanel.addEventListener('dragleave', (e) => {
            if (!chatPanel.contains(e.relatedTarget)) {
                dragOverlay.classList.remove('active');
            }
        });

        chatPanel.addEventListener('drop', (e) => {
            e.preventDefault();
            dragOverlay.classList.remove('active');
            
            const files = e.dataTransfer.files;
            for (let file of files) {
                addMessage(`📎 Dropped: ${file.name}`, 'user');
            }
        });

        // Enter key to send message
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Panel resizing
        let isResizing = false;
        const resizer = document.getElementById('panelResizer');
        const chatPanel2 = document.getElementById('chatPanel');

        resizer.addEventListener('mousedown', (e) => {
            isResizing = true;
            document.addEventListener('mousemove', resize);
            document.addEventListener('mouseup', stopResize);
        });

        function resize(e) {
            if (isResizing) {
                const newWidth = Math.max(250, Math.min(500, e.clientX - 20));
                chatPanel2.style.width = newWidth + 'px';
            }
        }

        function stopResize() {
            isResizing = false;
            document.removeEventListener('mousemove', resize);
            document.removeEventListener('mouseup', stopResize);
        }

        // Simulate live updates
        setInterval(() => {
            const agents = document.querySelectorAll('.agent-window');
            agents.forEach((agent, index) => {
                if (Math.random() > 0.7) {
                    const content = agent.querySelector('.agent-content');
                    const progress = content.innerHTML;
                    // Simulate progress updates
                }
            });
        }, 3000);
    </script>
</body>
</html>