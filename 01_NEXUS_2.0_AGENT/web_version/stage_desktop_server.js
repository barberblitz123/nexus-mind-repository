#!/usr/bin/env node
/**
 * NEXUS 2.0 Stage + Desktop Manager - Web Server
 * Provides the backend for the web version of your terminal system
 */

const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const path = require('path');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

// Agent management
class AgentManager {
    constructor() {
        this.agents = new Map();
        this.tasks = new Map();
    }

    createAgent(task, clientId) {
        const agentId = `agent-${Date.now()}`;
        const agentType = this.determineAgentType(task);
        
        const agent = {
            id: agentId,
            name: `${agentType} Agent`,
            type: agentType,
            task: task,
            status: 'initializing',
            created: new Date(),
            clientId: clientId,
            output: []
        };
        
        this.agents.set(agentId, agent);
        
        // Simulate agent work
        this.runAgent(agent);
        
        return agent;
    }

    determineAgentType(task) {
        const taskLower = task.toLowerCase();
        if (taskLower.includes('build') || taskLower.includes('create')) return 'Developer';
        if (taskLower.includes('analyze')) return 'Analyzer';
        if (taskLower.includes('test')) return 'Tester';
        if (taskLower.includes('research')) return 'Researcher';
        if (taskLower.includes('document')) return 'Documenter';
        if (taskLower.includes('deploy')) return 'Deployer';
        return 'General';
    }

    async runAgent(agent) {
        // Update status to working
        agent.status = 'working';
        this.broadcastAgentUpdate(agent);

        // Simulate different agent behaviors
        switch (agent.type) {
            case 'Developer':
                await this.runDeveloperAgent(agent);
                break;
            case 'Analyzer':
                await this.runAnalyzerAgent(agent);
                break;
            case 'Tester':
                await this.runTesterAgent(agent);
                break;
            default:
                await this.runGeneralAgent(agent);
        }

        // Mark as complete
        agent.status = 'complete';
        this.broadcastAgentUpdate(agent);
    }

    async runDeveloperAgent(agent) {
        const steps = [
            'Setting up project structure...',
            'Creating main application file...',
            'Implementing core functionality...',
            'Adding error handling...',
            'Optimizing performance...'
        ];

        for (const step of steps) {
            agent.output.push(step);
            this.broadcastAgentOutput(agent, step);
            await this.delay(1500);
        }

        // Final code output
        const code = `
# ${agent.task}
# Generated by NEXUS Developer Agent

def main():
    """Main application entry point"""
    print("Hello from NEXUS 2.0!")
    # Implementation would go here
    
if __name__ == "__main__":
    main()
`;
        agent.output.push(code);
        this.broadcastAgentOutput(agent, code, 'code');
    }

    async runAnalyzerAgent(agent) {
        const steps = [
            'Parsing code structure...',
            'Identifying patterns...',
            'Checking for issues...',
            'Generating report...'
        ];

        for (const step of steps) {
            agent.output.push(step);
            this.broadcastAgentOutput(agent, step);
            await this.delay(1000);
        }

        const report = `
Analysis Report:
- Code Quality: Good
- Potential Issues: 0
- Suggestions: Consider adding type hints
- Complexity: Low
`;
        agent.output.push(report);
        this.broadcastAgentOutput(agent, report, 'report');
    }

    async runTesterAgent(agent) {
        const tests = [
            'Running unit tests...',
            'Executing integration tests...',
            'Performing load tests...',
            'Generating coverage report...'
        ];

        for (const test of tests) {
            agent.output.push(test);
            this.broadcastAgentOutput(agent, test);
            await this.delay(800);
        }

        agent.output.push('All tests passed! ✓');
        this.broadcastAgentOutput(agent, 'All tests passed! ✓', 'success');
    }

    async runGeneralAgent(agent) {
        agent.output.push(`Processing: ${agent.task}`);
        this.broadcastAgentOutput(agent, `Processing: ${agent.task}`);
        await this.delay(2000);
        
        agent.output.push('Task completed successfully!');
        this.broadcastAgentOutput(agent, 'Task completed successfully!', 'success');
    }

    broadcastAgentUpdate(agent) {
        const message = {
            type: 'agent_update',
            agent: {
                id: agent.id,
                name: agent.name,
                type: agent.type,
                task: agent.task,
                status: agent.status,
                created: agent.created
            }
        };

        wss.clients.forEach(client => {
            if (client.readyState === WebSocket.OPEN) {
                client.send(JSON.stringify(message));
            }
        });
    }

    broadcastAgentOutput(agent, output, outputType = 'text') {
        const message = {
            type: 'agent_output',
            agentId: agent.id,
            output: output,
            outputType: outputType,
            timestamp: new Date()
        };

        wss.clients.forEach(client => {
            if (client.readyState === WebSocket.OPEN) {
                client.send(JSON.stringify(message));
            }
        });
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// Initialize agent manager
const agentManager = new AgentManager();

// Serve static files
app.use(express.static(__dirname));

// Explicit routes to fix "Cannot GET" errors
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'nexus_stage_desktop_web.html'));
});

app.get('/nexus_stage_desktop_web.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'nexus_stage_desktop_web.html'));
});

app.get('/nexus', (req, res) => {
    res.sendFile(path.join(__dirname, 'nexus_stage_desktop_web.html'));
});

// WebSocket handling
wss.on('connection', (ws) => {
    const clientId = `client-${Date.now()}`;
    console.log(`New client connected: ${clientId}`);

    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            
            switch (data.type) {
                case 'create_agent':
                    const agent = agentManager.createAgent(data.task, clientId);
                    ws.send(JSON.stringify({
                        type: 'agent_created',
                        agent: agent
                    }));
                    break;
                    
                case 'get_agents':
                    ws.send(JSON.stringify({
                        type: 'agents_list',
                        agents: Array.from(agentManager.agents.values())
                    }));
                    break;
                    
                default:
                    console.log('Unknown message type:', data.type);
            }
        } catch (error) {
            console.error('Error processing message:', error);
        }
    });

    ws.on('close', () => {
        console.log(`Client disconnected: ${clientId}`);
    });
});

// Start server
const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
    console.log(`
╔═══════════════════════════════════════════════════════╗
║  NEXUS 2.0 Stage + Desktop Manager (Web Version)     ║
║                                                       ║
║  Server running at: http://localhost:${PORT}         ║
║  Open nexus_stage_desktop_web.html in your browser   ║
╚═══════════════════════════════════════════════════════╝
    `);
});