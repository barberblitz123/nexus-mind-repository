version: '3.9'

services:
  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    container_name: nexus-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: nexus
      POSTGRES_USER: nexus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nexus_prod_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./scripts/postgres/init-primary.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./scripts/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus -d nexus"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nexus-network

  # PostgreSQL Read Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: nexus-postgres-replica
    restart: unless-stopped
    environment:
      POSTGRES_DB: nexus
      POSTGRES_USER: nexus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nexus_prod_password}
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_PRIMARY_PORT: 5432
      POSTGRES_PRIMARY_USER: replicator
      POSTGRES_PRIMARY_PASSWORD: ${REPLICATOR_PASSWORD:-replicator_password}
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
      - ./scripts/postgres/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh:ro
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - nexus-network

  # Redis Sentinel 1
  redis-sentinel-1:
    image: redis:7-alpine
    container_name: nexus-redis-sentinel-1
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./configs/redis/sentinel-1.conf:/etc/redis/sentinel.conf
      - redis-sentinel-1-data:/data
    ports:
      - "26379:26379"
    networks:
      - nexus-network

  # Redis Sentinel 2
  redis-sentinel-2:
    image: redis:7-alpine
    container_name: nexus-redis-sentinel-2
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./configs/redis/sentinel-2.conf:/etc/redis/sentinel.conf
      - redis-sentinel-2-data:/data
    ports:
      - "26380:26379"
    networks:
      - nexus-network

  # Redis Sentinel 3
  redis-sentinel-3:
    image: redis:7-alpine
    container_name: nexus-redis-sentinel-3
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./configs/redis/sentinel-3.conf:/etc/redis/sentinel.conf
      - redis-sentinel-3-data:/data
    ports:
      - "26381:26379"
    networks:
      - nexus-network

  # Redis Master
  redis-master:
    image: redis:7-alpine
    container_name: nexus-redis-master
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --dir /data
      --appendonly yes
      --appendfsync everysec
      --no-appendfsync-on-rewrite no
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --requirepass ${REDIS_PASSWORD:-redis_prod_password}
    volumes:
      - redis-master-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nexus-network

  # Redis Slave
  redis-slave:
    image: redis:7-alpine
    container_name: nexus-redis-slave
    restart: unless-stopped
    command: >
      redis-server
      --slaveof redis-master 6379
      --masterauth ${REDIS_PASSWORD:-redis_prod_password}
      --requirepass ${REDIS_PASSWORD:-redis_prod_password}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-slave-data:/data
    depends_on:
      - redis-master
    networks:
      - nexus-network

  # RabbitMQ with Management
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: nexus-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: nexus
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq_prod_password}
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 0.4
      RABBITMQ_DISK_FREE_LIMIT: 2GB
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./configs/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./configs/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - nexus-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: nexus-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - nexus-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: nexus-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana_prod_password}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,redis-datasource
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com:587}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - nexus-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: nexus-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-elastic_prod_password}
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTIC_PASSWORD:-elastic_prod_password} https://localhost:9200/_cluster/health?pretty -k || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - nexus-network

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.1
    container_name: nexus-logstash
    restart: unless-stopped
    environment:
      - "LS_JAVA_OPTS=-Xmx512m -Xms512m"
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-elastic_prod_password}
    volumes:
      - ./configs/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./configs/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - logstash-data:/usr/share/logstash/data
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - nexus-network

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: nexus-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD:-elastic_prod_password}
      ELASTICSEARCH_SSL_VERIFICATIONMODE: none
    volumes:
      - kibana-data:/usr/share/kibana/data
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - nexus-network

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: nexus-traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-admin@nexus.local}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--accesslog=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
    networks:
      - nexus-network

  # NEXUS Core Application
  nexus-core:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: nexus-core
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://nexus:${POSTGRES_PASSWORD:-nexus_prod_password}@postgres-primary:5432/nexus
      - DB_READ_REPLICAS=postgresql+asyncpg://nexus:${POSTGRES_PASSWORD:-nexus_prod_password}@postgres-replica:5432/nexus
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_prod_password}@redis-master:6379/0
      - REDIS_SENTINELS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=nexus
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-rabbitmq_prod_password}
      - CELERY_BROKER_URL=amqp://nexus:${RABBITMQ_PASSWORD:-rabbitmq_prod_password}@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_prod_password}@redis-master:6379/1
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nexus.rule=Host(`${DOMAIN:-nexus.local}`)"
      - "traefik.http.routers.nexus.entrypoints=websecure"
      - "traefik.http.routers.nexus.tls.certresolver=myresolver"
      - "traefik.http.services.nexus.loadbalancer.server.port=8000"
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - nexus-network

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: nexus-celery-worker
    restart: unless-stopped
    command: celery -A nexus worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://nexus:${POSTGRES_PASSWORD:-nexus_prod_password}@postgres-primary:5432/nexus
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_prod_password}@redis-master:6379/0
      - CELERY_BROKER_URL=amqp://nexus:${RABBITMQ_PASSWORD:-rabbitmq_prod_password}@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_prod_password}@redis-master:6379/1
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - nexus-core
    networks:
      - nexus-network

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: nexus-celery-beat
    restart: unless-stopped
    command: celery -A nexus beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://nexus:${POSTGRES_PASSWORD:-nexus_prod_password}@postgres-primary:5432/nexus
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_prod_password}@redis-master:6379/0
      - CELERY_BROKER_URL=amqp://nexus:${RABBITMQ_PASSWORD:-rabbitmq_prod_password}@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_prod_password}@redis-master:6379/1
    volumes:
      - ./logs:/app/logs
    depends_on:
      - nexus-core
    networks:
      - nexus-network

  # HashiCorp Vault (Optional)
  vault:
    image: hashicorp/vault:latest
    container_name: nexus-vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN:-vault_dev_token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - vault-data:/vault/data
      - ./configs/vault:/vault/config:ro
    ports:
      - "8200:8200"
    command: server -dev
    networks:
      - nexus-network

  # PgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nexus-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@nexus.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-pgadmin_password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - nexus-network
    profiles:
      - tools

networks:
  nexus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-primary-data:
  postgres-replica-data:
  redis-master-data:
  redis-slave-data:
  redis-sentinel-1-data:
  redis-sentinel-2-data:
  redis-sentinel-3-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  logstash-data:
  kibana-data:
  traefik-certificates:
  vault-data:
  pgadmin-data: